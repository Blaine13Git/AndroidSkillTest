apply plugin: 'com.android.application'
apply plugin: 'com.getkeepsafe.dexcount'
apply plugin: 'jacoco'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"

    useLibrary 'org.apache.http.legacy'

    defaultConfig {
        applicationId "com.windsing.androidskilltest"
        minSdkVersion 19
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
        debug {
            testCoverageEnabled = true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        abortOnError false
    }

}
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.1.0'
    testCompile 'junit:junit:4.12'
}

// jacoco code coverage
def coverageSourceDirs = [
        './src/main/java/',
]

/*def ecFiles = [
        '../JacocoDataDir/coverage.ec',
        './coverageECs/coverage1.ec'
]*/

task jacocoTestReport(type: JacocoReport) {
    group = "Reporting"
    description = "Generate Jacoco coverage reports after running."

    reports {
        html.enabled = true
        html.destination = "${buildDir}/reports/html/"
    }

    classDirectories = fileTree(
            dir: './build/intermediates/classes/debug/com/',
            excludes: ['**/R*.class',
                       '**/*$InjectAdapter.class',
                       '**/*$ModuleAdapter.class',
                       '**/*$ViewInjector*.class']
    )

    sourceDirectories = files(coverageSourceDirs)
//    sourceDirectories = fileTree(coverageSourceDirs)

    executionData = fileTree(dir: '../JacocoDataDir/')
//    executionData = files("$buildDir/coverage.ec","$buildDir/coverage1.ec")
//    executionData = files("${buildDir}/20170111_162202_1.0.ec")

    doFirst {
        new File("${buildDir}/intermediates/classes/").eachFileRecurse { file ->
            if (file.name.contains('$$')) {
                file.renameTo(file.path.replace('$$', '$'))
            }
        }
    }
}